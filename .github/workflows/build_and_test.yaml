name: Build Test Scan and Publish
on:
  push:
    branches:
      - main
  pull_request:

# Don't run multiple releases concurrently.
concurrency: release

jobs:
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    steps:
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to github registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v3
        with:
          file: ./Dockerfile.linux
          push: true
          tags: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  test-unit:
    name: Unit tests in Docker
    needs: [build-test-image]
    runs-on: ubuntu-22.04
    permissions:
      packages: read
    steps:
      - name: Login to github registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Unit Testing in Docker
        run: docker run --rm ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:"$GITHUB_RUN_ID" echo "lanzar comando para test npm run tests"

  test-integration:
    name: Integration tests in Compose
    needs: [build-test-image]
    runs-on: ubuntu-22.04
    permissions:
      packages: read
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      
      - name: Login to github registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # solo testing de healthcheck
      - name: Test healthcheck in Docker Compose
        run: |
          export TESTING_IMAGE=ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:"$GITHUB_RUN_ID"
          echo Testing image: "$TESTING_IMAGE"
          echo docker compose -f docker-compose.test.yml up --exit-code-from test-integration-app

  scan-image:
    name: Scan Image with Trivy
    needs: [build-test-image]
    runs-on: ubuntu-22.04

    permissions:
      contents: read # for actions/checkout to fetch code
      packages: read # needed to pull docker image to ghcr.io
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
          
      - name: Login to github registry ghcr.io
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image to scan
        run: docker pull ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:"$GITHUB_RUN_ID"
        
      - name: Run Trivy for all CVEs
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.actor }}/${{ github.event.repository.name }}:${{ github.run_id }}
          format: table
          exit-code: 0
  
  upload-artifact:
    name: Upload ${{ matrix.arch }} artifacts
    # needs: [scan-image]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [linux, windows]
        artifact_name: [main, main.exe]
        exclude:
        - arch: linux
          artifact_name: main.exe
        - arch: windows
          artifact_name: main

    steps:
      - uses: actions/checkout@v3

      - name: Build binary
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.arch }} GOARCH=amd64 go build -o ${{ matrix.artifact_name }}
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: Fhwang0926/upload-release-asset@v1.1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_name: ./testing_${{ matrix.artifact_name }}
          asset_label: latest

      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: ./${{ matrix.artifact_name }}
      #     tag: ${{ github.ref }}
      #     overwrite: true
      #     body: "Nueva version"



