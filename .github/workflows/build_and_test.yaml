name: Build Test Scan and Publish
on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # build-test-image:
  #   name: Build Image for Testing
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     packages: write
  #   outputs:
  #     image-tag: ${{ steps.meta.outputs.tags }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup docker buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Login to github registry ghcr.io
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ghcr.io/${{ github.repository }}
  #         tags: |
  #           type=sha,prefix={{branch}}-
  #           type=ref,event=pr
  #           type=raw,value=${{ github.run_id }}

  #     - name: Build and Push to GHCR
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         file: ./Dockerfile.linux
  #         push: true
  #         tags: ghcr.io/${{ github.repository }}:${{ github.run_id }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
  #         platforms: linux/amd64

  # test-unit:
  #   name: Unit tests in Docker
  #   needs: [build-test-image]
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     packages: read
  #   steps:
  #     - name: Checkout git repo
  #       uses: actions/checkout@v4

  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version-file: 'go.mod'
  #         cache: true

  #     - name: Run unit tests
  #       run: |
  #         go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      
  #     - name: Upload coverage
  #       uses: codecov/codecov-action@v4
  #       if: always()
  #       with:
  #         files: ./coverage.out
  #         fail_ci_if_error: false

  # test-integration:
    # name: Integration tests in Compose
    # needs: [build-test-image]
    # runs-on: ubuntu-22.04
    # permissions:
    #   packages: read
    # steps:
    #   - name: Checkout git repo
    #     uses: actions/checkout@v4
      
    #   - name: Login to github registry ghcr.io
    #     uses: docker/login-action@v3
    #     with:
    #       registry: ghcr.io
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}

    #   - name: Test healthcheck in Docker Compose
    #     run: |
    #       export TESTING_IMAGE=ghcr.io/${{ github.repository }}:${{ github.run_id }}
    #       echo "Testing image: ${TESTING_IMAGE}"
    #       docker compose -f docker-compose.test.yml up --exit-code-from test-integration-app --abort-on-container-exit
    #     timeout-minutes: 10

    #   - name: Show logs on failure
    #     if: failure()
    #     run: docker compose -f docker-compose.test.yml logs

  # scan-image:
  #   name: Scan Image with Trivy
  #   needs: [build-test-image]
  #   runs-on: ubuntu-22.04
  #   permissions:
  #     contents: read
  #     packages: read
  #     security-events: write
  #   steps:
      # - name: Checkout git repo
      #   uses: actions/checkout@v4
          
      # - name: Login to github registry ghcr.io
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Pull image to scan
      #   run: docker pull ghcr.io/${{ github.repository }}:${{ github.run_id }}
        
      # # Scan informativo - muestra todas las vulnerabilidades
      # - name: Run Trivy for all CVEs (informative)
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ghcr.io/${{ github.repository }}:${{ github.run_id }}
      #     format: table
      #     exit-code: 0

      # # Scan que falla en vulnerabilidades CRITICAL/HIGH
      # - name: Run Trivy (fail on CRITICAL/HIGH)
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: ghcr.io/${{ github.repository }}:${{ github.run_id }}
      #     format: sarif
      #     output: trivy-results.sarif
      #     severity: 'CRITICAL,HIGH'
      #     exit-code: 1
      #     ignore-unfixed: true

      # - name: Upload Trivy results to GitHub Security
      #   if: always()
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: trivy-results.sarif

  upload-artifact:
    name: Upload ${{ matrix.goos }} artifacts
    # Solo ejecutar si TODOS los tests y scans pasan
    needs: [test-unit, test-integration, scan-image]
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: linux
            artifact_name: licencias
          - goos: windows
            artifact_name: licencias.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Build binary
        run: |
          export VERSION_BUILD=$(date -u "+%Y-%m-%dT%H:%M:%SZ")
          export VERSION_COMMIT=${{ github.sha }}
          echo "${VERSION_BUILD}" > date_build_${{ matrix.artifact_name }}.txt
          CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags="-X 'main/update.VersionBuild=${VERSION_BUILD}' -X 'main/update.VersionCommit=${VERSION_COMMIT}' -s -w" \
            -trimpath \
            -o ${{ matrix.artifact_name }}

      - name: Generate checksum
        run: |
          shasum -a 256 ${{ matrix.artifact_name }} | cut -d' ' -f1 > checksum_${{ matrix.artifact_name }}.txt

      - name: Upload binaries to release
        # Solo en push a main, no en PRs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.sha }}"
          body: |
            **Build:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Date:** $(date -u "+%Y-%m-%d %H:%M:%S UTC")
          draft: false
          prerelease: false
          tag_name: latest
          files: |
            ${{ matrix.artifact_name }}
            date_build_${{ matrix.artifact_name }}.txt
            checksum_${{ matrix.artifact_name }}.txt

  # Job opcional: limpiar im√°genes antiguas
  cleanup-old-images:
    name: Cleanup old test images
    needs: [upload-artifact]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true